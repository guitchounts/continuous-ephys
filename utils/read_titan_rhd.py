

import numpy as np
import sys,os
import pickle
import seaborn as sns

import struct
import contextlib

class ReadTitanRHD(object):
    """
    Ojbect used to read in raw RHD file generated by TitanSpikes...
    """

    def __init__(self,file_path,chunk_size=176,num_chunks=1):
        """
        stuff...

        """
        
        self.file_path = file_path

        self.chunk_size = 176 
        self.num_chunks=10000.   ### unused....

        
            
            #print idx

        

    def read_file(self,num_chunks,offset=0):

        num_chunks = int(num_chunks)

        print('Reading in %d chunks, starting at offset %d' % (num_chunks,offset))
        f = open(self.file_path)

        self.data = np.chararray([num_chunks],itemsize=self.chunk_size)

        for idx,piece in enumerate(self.read_in_chunks(f,self.chunk_size,num_chunks,offset)):
            #data.append(process_data(piece))
            self.data[idx] = self.return_data(piece)

        timestamp = np.empty([num_chunks],dtype='uint32')
        acc_vdd_tmp = np.empty([num_chunks,2],dtype='uint16')
        electrodes = np.empty([num_chunks,64],dtype='uint16')

        for idx,dat in enumerate(self.data):
            timestamp[idx],acc_vdd_tmp[idx,:],electrodes[idx,:] = self.unpack_data(dat)

        return timestamp,acc_vdd_tmp,electrodes

    def read_in_chunks(self,file_object, chunk_size=176,num_chunks=1,offset=0):
        counter = 0
        file_object.seek(offset)

        while counter < num_chunks:
                      
            data = file_object.read(chunk_size)
            if not data:
                break
            counter += 1
            yield data


    def return_data(self,piece):
        
        return piece  
        

    def unpack_data(self,data):
        
        timestamp = np.array(struct.unpack('I', data[8:12]))
        
        acc_vdd_tmp = np.array(struct.unpack('H'*2,data[16:20]))
        
        electrodes = struct.unpack('H'*64,data[24:152])    
        electrodes = np.array([electrodes[0::2],electrodes[1::2]]).flatten()
        
        return timestamp,acc_vdd_tmp,electrodes
    




    